    # Verificador de Edad para Pel√≠culas completo
    # Autor: Fabrizzio Lora (FaXx0)
    # Descripci√≥n: Este programa solicita la edad del usuario y le recomienda pel√≠culas seg√∫n su clasificaci√≥n.  

# Funci√≥n para obtener la clasificaci√≥n de pel√≠culas seg√∫n la edad
def obtener_clasificacion(edad): # Funci√≥n principal
    if edad < 0 or edad > 120: # Validaci√≥n de edad
        return "Edad no v√°lida." # Mensaje de error
    elif edad < 13: # Clasificaci√≥n para menores de 13 a√±os
        return "Te recomendamos pel√≠culas clasificadas G o PG." # Mensaje de recomendaci√≥n
    elif edad < 18: # Clasificaci√≥n para mayores de 13 a√±os y menores de 18 a√±os
        return "Puedes ver pel√≠culas clasificadas PG-13." # Mensaje de recomendaci√≥n
    else: # Clasificaci√≥n para mayores de 18 a√±os    
        return "¬°Puedes ver pel√≠culas clasificadas R!" # Mensaje de recomendaci√≥n

def pruebas(): # Funci√≥n para pruebas de la funci√≥n obtener_clasificacion (pruebas unitarias) 
    assert obtener_clasificacion(10) == "Te recomendamos pel√≠culas clasificadas G o PG."
    "Prueba fallida: Ni√±o de 10 a√±os" 
    print("‚úÖ Prueba 7 PASADA: Ni√±o de 10 a√±os") # Prueba 1
    assert obtener_clasificacion(13) == "Puedes ver pel√≠culas clasificadas PG-13."
    "Prueba fallida: L√≠mite Adolescente (13 a√±os)"
    print("‚úÖ Prueba 5 PASADA: L√≠mite adolescente (13 a√±os)") # Prueba 2
    assert obtener_clasificacion(17) == "Puedes ver pel√≠culas clasificadas PG-13."
    "Prueba fallida: Adolescente de 17 a√±os"
    print("‚úÖ Prueba 6 PASADA: Adolescente de 17 a√±os") # Prueba 3
    assert obtener_clasificacion(18) == "¬°Puedes ver pel√≠culas clasificadas R!"
    "Prueba fallida: L√≠mite Adulto (18 a√±os)"
    print("‚úÖ Prueba 2 PASADA: L√≠mite adulto (18 a√±os)") # Prueba 4
    assert obtener_clasificacion(65) == "¬°Puedes ver pel√≠culas clasificadas R!"
    "Prueba fallida: Adulto mayor"
    print("‚úÖ Prueba 3 PASADA: Adulto mayor de 65 a√±os") # Prueba 5
    assert obtener_clasificacion(0) == "Te recomendamos pel√≠culas clasificadas G o PG."
    "Prueba fallida: Edad 0 a√±os"
    print("‚úÖ Prueba 12 PASADA: Beb√© de 0 a√±os")# Prueba 6
    assert obtener_clasificacion(-1) == "Edad no v√°lida."
    "Prueba fallida: Edad negativa"
    print("‚úÖ Prueba 10 PASADA: Edad negativa (-1)") # Prueba 7
    assert obtener_clasificacion(150) == "Edad no v√°lida."
    "Prueba fallida: Edad excesivamente alta"
    print("‚úÖ Prueba 11 PASADA: Edad excesivamente alta (150)")# Prueba 8                     
    print("‚úÖ Todas las pruebas pasaron.") # Mensaje de √©xito
    print("üõ°Ô∏è  Nuestra funci√≥n es robusta y maneja todos los casos correctamente.")
    # Fin de las pruebas

def pedir_edad(): # Funci√≥n para pedir la edad del usuario y validarla (entrada de datos)
    while True: # Bucle hasta que el usuario ingrese un n√∫mero v√°lido (entrada de datos)
        try: # Intenta convertir la entrada del usuario a un n√∫mero entero 
            return int(input("Ingresa tu edad: ")) # Retorna la edad ingresada por el usuario
        except ValueError: # Si la entrada no es un n√∫mero v√°lido, muestra un mensaje de error
            print("‚ùå Ingresa un n√∫mero v√°lido.") # Mensaje de error

def main(): # Funci√≥n principal del programa (men√∫ principal)
    print("üé¨ Verificador de Edad para Pel√≠culas üé¨") # Mensaje de bienvenida
    pruebas() # Ejecuta las pruebas unitarias
    edad = pedir_edad() # Pide la edad del usuario y la valida
    mensaje = obtener_clasificacion(edad) # Obtiene la clasificaci√≥n de pel√≠culas seg√∫n la edad del usuario
    print("\nüé≠ Clasificaci√≥n:", mensaje) # Muestra la clasificaci√≥n de pel√≠culas seg√∫n la edad del usuario
    print("üçø ¬°Disfrutina tu pel√≠cula!")# Mensaje de despedida
    print("Fabrizzio Lora (FaXx0)")

if __name__ == "__main__": # Si el archivo se ejecuta directamente, ejecuta la funci√≥n main() (entrada al programa)
    main() # Ejecuta la funci√≥n main() (entrada al programa)    # Fin del programa


##################################################################################################################################################################

